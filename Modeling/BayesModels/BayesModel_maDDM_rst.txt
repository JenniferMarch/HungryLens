model{
	#Group Priors: baseline (sated)
	mu_bound ~ dnorm(2,1)
	sigma_bound ~ dnorm(0,3)I(0,)
	mu_ndt ~ dnorm(-1,1)
	sigma_ndt ~ dnorm(0,1)I(0,)
	mu_drift ~ dnorm(0,1/2)
	sigma_drift ~ dnorm(0,1/2)I(0,)
	mu_weight1 ~ dnorm(0,1/2)
	sigma_weight1 ~ dnorm(0,1/2)I(0,)
	mu_rst ~ dnorm(0,1/2)
	sigma_rst ~ dnorm(0,1/2)I(0,)	

	#Group Priors: effect of hunger
	mu_bound_H ~ dnorm(0,1)
	sigma_bound_H ~ dnorm(0,1)I(0,)
	mu_ndt_H ~ dnorm(0,1)
	sigma_ndt_H ~ dnorm(0,1)I(0,)
	mu_drift_H ~ dnorm(0,1/2)
	sigma_drift_H ~ dnorm(0,1/2)I(0,)
	mu_weight1_H ~ dnorm(0,1/4)
	sigma_weight1_H ~ dnorm(0,1/4)I(0,)	
	mu_rst_H ~ dnorm(0,1/4)
	sigma_rst_H ~ dnorm(0,1/4)I(0,)	

	#transform SDs into precisions
	lambda_bound <- pow(sigma_bound,-2)
	lambda_ndt <- pow(sigma_ndt,-2)
	lambda_drift <- pow(sigma_drift,-2)
	lambda_weight1 <- pow(sigma_weight1,-2)
	lambda_rst <- pow(sigma_rst,-2)
	lambda_bound_H <- pow(sigma_bound_H,-2)
	lambda_ndt_H <- pow(sigma_ndt_H,-2)
	lambda_drift_H <- pow(sigma_drift_H,-2)
	lambda_weight1_H <- pow(sigma_weight1_H,-2)
	lambda_rst_H <- pow(sigma_rst_H,-2)

	#Subject Priors
	for (s in 1:S){
		bound[s] ~ dnorm(mu_bound,lambda_bound)
		ndt[s] ~ dnorm(mu_ndt,lambda_ndt)
		drift[s] ~ dnorm(mu_drift,lambda_drift)	
		weight1[s] ~ dnorm(mu_weight1,lambda_weight1)
		rst[s] ~ dnorm(mu_rst,lambda_rst)
		bound_H[s] ~ dnorm(mu_bound_H,lambda_bound_H)
		ndt_H[s] ~ dnorm(mu_ndt_H,lambda_ndt_H)
		drift_H[s] ~ dnorm(mu_drift_H,lambda_drift_H)
		weight1_H[s] ~ dnorm(mu_weight1_H,lambda_weight1_H)
		rst_H[s] ~ dnorm(mu_rst_H,lambda_rst_H)

		#soft-plus and phi transformations
		boundS[s] <- log(1+exp(bound[s]))
		boundH[s] <- log(1+exp(bound[s]+bound_H[s]))
		ndtS[s] <- log(1+exp(ndt[s]))
		ndtH[s] <- log(1+exp(ndt[s]+ndt_H[s]))
		driftS[s] <- log(1+exp(drift[s]))
		driftH[s] <- log(1+exp(drift[s]+drift_H[s]))
		weight1S[s] <- weight1[s]#log(1+exp(weight1[s]))
		weight1H[s] <- weight1[s]+weight1_H[s]#log(1+exp(weight1[s]+weight1_H[s]))
		weight2S[s] <- 1-weight1S[s]
		weight2H[s] <- 1-weight1H[s]
		rstS[s] <- rst[s]
		rstH[s] <- rst[s]+rst_H[s]
		}

	#Model
	for (n in 1:N){
		VD1[n] <- (weight1S[P[n]]*equals(H[n],0)+weight1H[P[n]]*equals(H[n],1))*(tasteA[n]-tasteB[n])
		VD2[n] <- (weight2S[P[n]]*equals(H[n],0)+weight2H[P[n]]*equals(H[n],1))*(healthA[n]-healthB[n])
		VD12[n] <- VD1[n]+VD2[n]
		dt[n] <- RT2[n]-(ndtS[P[n]]*equals(H[n],0)+ndtH[P[n]]*equals(H[n],1))
		rst_n[n] <- rstS[P[n]]*equals(H[n],0)+rstH[P[n]]*equals(H[n],1)
		VD[n] <- ((rst_n[n]>0)*rst_n[n]/dt[n]*VD1[n]+(rst_n[n]<0)*abs(rst_n[n])/dt[n]*VD2[n]+(dt[n]-abs(rst_n[n]))/dt[n]*VD12[n])*(dt[n]>abs(rst_n[n]))+((rst_n[n]>0)*VD1[n]+(rst_n[n]<0)*VD2[n])*(dt[n]<abs(rst_n[n]))
		RT[n] ~ dwiener(boundS[P[n]]*equals(H[n],0)+boundH[P[n]]*equals(H[n],1),(ndtS[P[n]]*equals(H[n],0)+ndtH[P[n]]*equals(H[n],1)),0.5,(driftS[P[n]]*equals(H[n],0)+driftH[P[n]]*equals(H[n],1))*VD[n])
		}
}
